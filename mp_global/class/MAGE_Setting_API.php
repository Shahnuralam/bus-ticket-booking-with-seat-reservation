<?php	if (!defined('ABSPATH')) {		die;	} // Cannot access pages directly.	if (!class_exists('MAGE_Setting_API')) {		class MAGE_Setting_API {			protected $settings_sections = array();			protected $settings_fields = array();			public function __construct() {				add_action('admin_enqueue_scripts', array($this, 'admin_enqueue_scripts'));			}			function admin_enqueue_scripts() {				wp_enqueue_style('wp-color-picker');				wp_enqueue_media();				wp_enqueue_script('wp-color-picker');				wp_enqueue_script('jquery');			}			function set_sections($sections) {				$this->settings_sections = $sections;				return $this;			}			function add_section($section) {				$this->settings_sections[] = $section;				return $this;			}			function set_fields($fields) {				$this->settings_fields = $fields;				return $this;			}			function add_field($section, $field) {				$defaults = array(					'name' => '',					'label' => '',					'desc' => '',					'type' => 'text'				);				$arg = wp_parse_args($field, $defaults);				$this->settings_fields[$section][] = $arg;				return $this;			}			function admin_init() {				//register settings sections				foreach ($this->settings_sections as $section) {					if (false == get_option($section['id'])) {						add_option($section['id']);					}					if (isset($section['desc']) && !empty($section['desc'])) {						$section['desc'] = '<div class="inside">' . $section['desc'] . '</div>';						$callback = function () use ($section) {							echo str_replace('"', '\"', $section['desc']);						};					}					else if (isset($section['callback'])) {						$callback = $section['callback'];					}					else {						$callback = null;					}					add_settings_section($section['id'], $section['title'], $callback, $section['id']);				}				//register settings fields				foreach ($this->settings_fields as $section => $field) {					foreach ($field as $option) {						$name = $option['name'];						$type = isset($option['type']) ? $option['type'] : 'text';						$label = isset($option['label']) ? $option['label'] : '';						$callback = isset($option['callback']) ? $option['callback'] : array($this, 'callback_' . $type);						$args = array(							'id' => $name,							'class' => isset($option['class']) ? $option['class'] : $name,							'label_for' => "{$section}[{$name}]",							'desc' => isset($option['desc']) ? $option['desc'] : '',							'name' => $label,							'section' => $section,							'size' => isset($option['size']) ? $option['size'] : null,							'options' => isset($option['options']) ? $option['options'] : '',							'std' => isset($option['default']) ? $option['default'] : '',							'sanitize_callback' => isset($option['sanitize_callback']) ? $option['sanitize_callback'] : '',							'type' => $type,							'placeholder' => isset($option['placeholder']) ? $option['placeholder'] : '',							'min' => isset($option['min']) ? $option['min'] : '',							'max' => isset($option['max']) ? $option['max'] : '',							'step' => isset($option['step']) ? $option['step'] : '',						);						$label .= $this->get_field_description($args);						add_settings_field("{$section}[{$name}]", $label, $callback, $section, $section, $args);					}				}				// creates our settings in the options table				foreach ($this->settings_sections as $section) {					register_setting($section['id'], $section['id'], array($this, 'sanitize_options'));				}			}			public function get_field_description($args) {				if (!empty($args['desc'])) {					$desc = sprintf('<p class="description">%s</p>', $args['desc']);				}				else {					$desc = '';				}				return $desc;			}			function callback_text($args) {				$placeholder = empty($args['placeholder']) ? '' : $args['placeholder'];				?>				<div class="mpStyle">					<label>						<input type="text"							name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>"							class="formControl mp_name_validation"							value="<?php echo MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']); ?>"							placeholder="<?php echo esc_attr($placeholder); ?>"						/>					</label>				</div>				<?php			}			function callback_datepicker($args) {				$date_format = MP_Global_Function::date_picker_format();				$now = date_i18n($date_format, strtotime(current_time('Y-m-d')));				$date = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$hidden_date = $date ? date('Y-m-d', strtotime($date)) : '';				$visible_date = $date ? date_i18n($date_format, strtotime($date)) : '';				?>				<div class="mpStyle">					<label>						<input type="hidden" name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>" value="<?php echo esc_attr($hidden_date); ?>"/>						<input type="text" readonly name="" class="formControl date_type" value="<?php echo esc_attr($visible_date); ?>" placeholder="<?php echo esc_attr($now); ?>"/>					</label>				</div>				<?php			}			function callback_mp_select2($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				?>				<div class="mpStyle">					<label>						<select name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>" class="formControl mp_select2">							<?php foreach ($args['options'] as $key => $label) { ?>								<option value="<?php echo esc_attr($key); ?>" <?php echo esc_attr($key == $value ? 'selected' : ''); ?>><?php echo esc_html($label); ?></option>							<?php } ?>						</select>					</label>				</div>				<?php			}			function callback_mp_select2_role($args) {				global $wp_roles;				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				?>				<div class="mpStyle">					<label>						<select name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>" class="formControl mp_select2" multiple>							<?php foreach ($wp_roles->roles as $key => $label) { ?>								<option value="<?php echo esc_attr($key); ?>" <?php echo in_array($key, $value) ? 'selected' : ''; ?>><?php echo esc_html($label['name']); ?></option>							<?php } ?>						</select>					</label>				</div>				<?php			}			function callback_url($args) {				$this->callback_text($args);			}			function callback_number($args) {				$placeholder = empty($args['placeholder']) ? '' : $args['placeholder'];				?>				<div class="mpStyle">					<label>						<input type="number"							name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>"							class="formControl mp_name_validation"							value="<?php echo MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']); ?>"							placeholder="<?php echo esc_attr($placeholder); ?>"							<?php echo esc_attr(empty($args['min']) ? '' : ' min="' . $args['min'] . '"'); ?>							<?php echo esc_attr(empty($args['max']) ? '' : ' max="' . $args['max'] . '"'); ?>							<?php echo esc_attr(empty($args['step']) ? '' : ' step="' . $args['step'] . '"'); ?>						/>					</label>				</div>				<?php			}			function callback_checkbox($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$html = '<fieldset>';				$html .= sprintf('<label for="wpuf-%1$s[%2$s]">', $args['section'], $args['id']);				$html .= sprintf('<input type="hidden" name="%1$s[%2$s]" value="off" />', $args['section'], $args['id']);				$html .= sprintf('<input type="checkbox" class="checkbox" id="wpuf-%1$s[%2$s]" name="%1$s[%2$s]" value="on" %3$s />', $args['section'], $args['id'], checked($value, 'on', false));				$html .= sprintf('%1$s</label>', $args['desc']);				$html .= '</fieldset>';				echo MP_Global_Function::esc_html($html);			}			function callback_multicheck($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$html = '<fieldset>';				$html .= sprintf('<input type="hidden" name="%1$s[%2$s]" value="" />', $args['section'], $args['id']);				foreach ($args['options'] as $key => $label) {					$checked = isset($value[$key]) ? $value[$key] : '0';					$html .= sprintf('<label for="wpuf-%1$s[%2$s][%3$s]">', $args['section'], $args['id'], $key);					$html .= sprintf('<input type="checkbox" class="checkbox" id="wpuf-%1$s[%2$s][%3$s]" name="%1$s[%2$s][%3$s]" value="%3$s" %4$s />', $args['section'], $args['id'], $key, checked($checked, $key, false));					$html .= sprintf('%1$s</label><br>', $label);				}				// $html .= $this->get_field_description( $args );				$html .= '</fieldset>';				echo MP_Global_Function::esc_html($html);			}			function callback_radio($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$html = '<fieldset>';				foreach ($args['options'] as $key => $label) {					$html .= sprintf('<label for="wpuf-%1$s[%2$s][%3$s]">', $args['section'], $args['id'], $key);					$html .= sprintf('<input type="radio" class="radio" id="wpuf-%1$s[%2$s][%3$s]" name="%1$s[%2$s]" value="%3$s" %4$s />', $args['section'], $args['id'], $key, checked($value, $key, false));					$html .= sprintf('%1$s</label><br>', $label);				}				// $html .= $this->get_field_description( $args );				$html .= '</fieldset>';				echo MP_Global_Function::esc_html($html);			}			function callback_select($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				?>				<div class="mpStyle">					<label>						<select name="<?php echo esc_attr($args['section'] . '[' . $args['id'] . ']'); ?>" class="formControl">							<?php foreach ($args['options'] as $key => $label) { ?>								<option value="<?php echo esc_attr($key); ?>" <?php echo esc_attr($key == $value ? 'selected' : ''); ?>><?php echo esc_html($label); ?></option>							<?php } ?>						</select>					</label>				</div>				<?php			}			function callback_textarea($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$size = isset($args['size']) && !is_null($args['size']) ? $args['size'] : 'regular';				$placeholder = empty($args['placeholder']) ? '' : ' placeholder="' . $args['placeholder'] . '"';				$html = sprintf('<textarea rows="5" cols="55" class="%1$s-text" id="%2$s[%3$s]" name="%2$s[%3$s]"%4$s>%5$s</textarea>', $size, $args['section'], $args['id'], $placeholder, $value);				// $html        .= $this->get_field_description( $args );				echo MP_Global_Function::esc_html($html);			}			function callback_html($args) {				echo MP_Global_Function::esc_html($this->get_field_description($args));			}			function callback_wysiwyg($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$size = isset($args['size']) && !is_null($args['size']) ? $args['size'] : '500px';				echo '<div style="max-width: ' . $size . ';">';				$editor_settings = array(					'teeny' => true,					'textarea_name' => $args['section'] . '[' . $args['id'] . ']',					'textarea_rows' => 10				);				if (isset($args['options']) && is_array($args['options'])) {					$editor_settings = array_merge($editor_settings, $args['options']);				}				wp_editor($value, $args['section'] . '-' . $args['id'], $editor_settings);				echo '</div>';				// echo MP_Global_Function::esc_html($this->get_field_description( $args ));			}			function callback_file($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$size = isset($args['size']) && !is_null($args['size']) ? $args['size'] : 'regular';				$id = $args['section'] . '[' . $args['id'] . ']';				$label = isset($args['options']['button_label']) ? $args['options']['button_label'] : __('Choose File');				$html = sprintf('<input type="text" class="%1$s-text wpsa-url" id="%2$s[%3$s]" name="%2$s[%3$s]" value="%4$s"/>', $size, $args['section'], $args['id'], $value);				$html .= '<input type="button" class="button wpsa-browse" value="' . $label . '" />';				// $html  .= $this->get_field_description( $args );				echo MP_Global_Function::esc_html($html);			}			function callback_password($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$size = isset($args['size']) && !is_null($args['size']) ? $args['size'] : 'regular';				$html = sprintf('<input type="password" class="%1$s-text" id="%2$s[%3$s]" name="%2$s[%3$s]" value="%4$s"/>', $size, $args['section'], $args['id'], $value);				// $html  .= $this->get_field_description( $args );				echo MP_Global_Function::esc_html($html);			}			function callback_color($args) {				$value = MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']);				$size = isset($args['size']) && !is_null($args['size']) ? $args['size'] : 'regular';				$html = sprintf('<input type="text" class="%1$s-text wp-color-picker-field" id="%2$s[%3$s]" name="%2$s[%3$s]" value="%4$s" data-default-color="%5$s" />', $size, $args['section'], $args['id'], $value, $args['std']);				// $html  .= $this->get_field_description( $args );				echo MP_Global_Function::esc_html($html);			}			function callback_pages($args) {				$dropdown_args = array(					'selected' => MP_Global_Function::get_settings($args['id'], $args['section'], $args['std']),					'name' => $args['section'] . '[' . $args['id'] . ']',					'id' => $args['section'] . '[' . $args['id'] . ']',					'echo' => 0				);				$html = wp_dropdown_pages($dropdown_args);				echo MP_Global_Function::esc_html($html);			}			function sanitize_options($options) {				if (!$options) {					return $options;				}				foreach ($options as $option_slug => $option_value) {					$sanitize_callback = $this->get_sanitize_callback($option_slug);					// If callback is set, call it					if ($sanitize_callback) {						$options[$option_slug] = call_user_func($sanitize_callback, $option_value);						continue;					}				}				return $options;			}			function get_sanitize_callback($slug = '') {				if (empty($slug)) {					return false;				}				// Iterate over registered fields and see if we can find proper callback				foreach ($this->settings_fields as $section => $options) {					foreach ($options as $option) {						if ($option['name'] != $slug) {							continue;						}						// Return the callback name						return isset($option['sanitize_callback']) && is_callable($option['sanitize_callback']) ? $option['sanitize_callback'] : false;					}				}				return false;			}			function show_navigation() {				$html = '<h2 class="nav-tab-wrapper">';				$count = count($this->settings_sections);				// don't show the navigation if only one section exists				if ($count === 1) {					return;				}				foreach ($this->settings_sections as $tab) {					$html .= sprintf('<a href="#%1$s" class="nav-tab" id="%1$s-tab">%2$s</a>', $tab['id'], $tab['title']);				}				$html .= '</h2>';				echo MP_Global_Function::esc_html($html);			}			function show_forms() {				?>				<div class="metabox-holder">					<?php foreach ($this->settings_sections as $form) { ?>						<div id="<?php echo esc_html($form['id']); ?>" class="group" style="display: none;">							<form method="post" action="options.php">								<?php									do_action('wsa_form_top_' . $form['id'], $form);									settings_fields($form['id']);									do_settings_sections($form['id']);									do_action('wsa_form_bottom_' . $form['id'], $form);									if (isset($this->settings_fields[$form['id']])):										?>										<div style="padding-left: 10px">											<?php submit_button(); ?>										</div>									<?php endif; ?>							</form>						</div>					<?php } ?>				</div>				<?php				$this->script();			}			function script() {				?>				<script>					jQuery(document).ready(function ($) {						//Initiate Color Picker						$('.wp-color-picker-field').wpColorPicker();						// Switches option sections						$('.group').hide();						var activetab = '';						if (typeof (localStorage) != 'undefined') {							activetab = localStorage.getItem("activetab");						}						//if url has section id as hash then set it as active or override the current local storage value						if (window.location.hash) {							activetab = window.location.hash;							if (typeof (localStorage) != 'undefined') {								localStorage.setItem("activetab", activetab);							}						}						if (activetab != '' && $(activetab).length) {							$(activetab).fadeIn();						} else {							$('.group:first').fadeIn();						}						$('.group .collapsed').each(function () {							$(this).find('input:checked').parent().parent().parent().nextAll().each(								function () {									if ($(this).hasClass('last')) {										$(this).removeClass('hidden');										return false;									}									$(this).filter('.hidden').removeClass('hidden');								});						});						if (activetab != '' && $(activetab + '-tab').length) {							$(activetab + '-tab').addClass('nav-tab-active');						} else {							$('.nav-tab-wrapper a:first').addClass('nav-tab-active');						}						$('.nav-tab-wrapper a').click(function (evt) {							$('.nav-tab-wrapper a').removeClass('nav-tab-active');							$(this).addClass('nav-tab-active').blur();							var clicked_group = $(this).attr('href');							if (typeof (localStorage) != 'undefined') {								localStorage.setItem("activetab", $(this).attr('href'));							}							$('.group').hide();							$(clicked_group).fadeIn();							evt.preventDefault();						});						$('.wpsa-browse').on('click', function (event) {							event.preventDefault();							var self = $(this);							// Create the media frame.							var file_frame = wp.media.frames.file_frame = wp.media({								title: self.data('uploader_title'),								button: {									text: self.data('uploader_button_text'),								},								multiple: false							});							file_frame.on('select', function () {								attachment = file_frame.state().get('selection').first().toJSON();								self.prev('.wpsa-url').val(attachment.url).change();							});							// Finally, open the modal							file_frame.open();						});					});				</script>				<?php			}		}	}